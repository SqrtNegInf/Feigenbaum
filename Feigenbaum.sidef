#!/usr/local/bin/sidef
# answer does not change, x*x vs x²
# closer to the OEIS value (https://oeis.org/A006890) despite using same math libraries as Perl?
# Trizen explains:
#   Sidef's numerical system is pretty much identical with Math::AnyNum, using Math::MPFR for floating-point operations 
#   (see also: GNU MPFR library), with a default precision of 192 bits.
# What follows is his version from rosettacode:
#   http://rosettacode.org/wiki/Feigenbaum_constant_calculation#Sidef

var a1 = 1
var a2 = 0
var δ  = 3.2.float
 
say " i\tδ"
 
for i in (2..15) {
    var a0 = ((a1 - a2)/δ + a1)
    10.times {
        var (x, y) = (0, 0)
        2**i -> times {
            y = (1 - 2*x*y)
            #x = (a0 - x*x)
            x = (a0 - x²)
        }
        a0 -= x/y
    }
    δ = ((a1 - a2) / (a0 - a1))
    (a2, a1) = (a1, a0)
    printf("%2d %.10f\n", i, δ)
}

__END__
 i  δ
 2 3.2185114220
 3 4.3856775986
 4 4.6009492765
 5 4.6551304954
 6 4.6661119478
 7 4.6685485814
 8 4.6690606606
 9 4.6691715554
10 4.6691951560
11 4.6692002291
12 4.6692013133
13 4.6692015458
14 4.6692015955
15 4.6692016062
